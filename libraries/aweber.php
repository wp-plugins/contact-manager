<?php class AWeberException extends Exception{}class AWeberAPIException extends AWeberException{ public $type; public $status; public $message; public $documentation_url; public $url; public function __construct($error,$url){$this->url=$url;$this->type=$error['type'];$this->status=array_key_exists('status',$error)?$error['status']:'';$this->message=$error['message'];$this->documentation_url=$error['documentation_url'];parent::__construct($this->message);}}class AWeberResourceNotImplemented extends AWeberException{ public function __construct($object,$value){$this->object=$object;$this->value=$value;parent::__construct("Resource \"{$value}\" is not implemented on this resource.");}}class AWeberMethodNotImplemented extends AWeberException{ public function __construct($object){$this->object=$object;parent::__construct("This method is not implemented by the current resource.");}}class AWeberOAuthException extends AWeberException{ public function __construct($type,$message){$this->type=$type;$this->message=$message;parent::__construct("{$type}: {$message}");}}class AWeberOAuthDataMissing extends AWeberException{ public function __construct($missing){if(!is_array($missing))$missing=array($missing);$this->missing=$missing;$required=join(', ',$this->missing);parent::__construct("OAuthDataMissing: Response was expected to contain: {$required}");}}class AWeberResponseError extends AWeberException{ public function __construct($uri){$this->uri=$uri;parent::__construct("Request for {$uri} did not respond properly.");}} interface AWeberOAuthAdapter{ public function request($method,$uri,$data=array()); public function getRequestToken($callbackUrl=false);}if(!class_exists('CurlObject')){ interface CurlInterface{ public function errno($ch); public function error($ch); public function execute($ch); public function init($url); public function setopt($ch,$option,$value);}class CurlObject implements CurlInterface{ public function errno($ch){return curl_errno($ch);} public function error($ch){return curl_error($ch);} public function execute($ch){return curl_exec($ch);} public function init($url){return curl_init($url);} public function setopt($ch,$option,$value){return curl_setopt($ch,$option,$value);}}}if(!class_exists('CurlResponse')){class CurlResponse{ public $body=''; public $headers=array(); public function __construct($response){$pattern='#HTTP/\d\.\d.*?$.*?\r\n\r\n#ims';preg_match_all($pattern,$response,$matches);$headers=explode("\r\n",str_replace("\r\n\r\n",'',array_pop($matches[0])));$version_and_status=array_shift($headers);preg_match('#HTTP/(\d\.\d)\s(\d\d\d)\s(.*)#',$version_and_status,$matches);$this->headers['Http-Version']=$matches[1];$this->headers['Status-Code']=$matches[2];$this->headers['Status']=$matches[2].' '.$matches[3];foreach($headers as $header){preg_match('#(.*?)\:\s(.*)#',$header,$matches);$this->headers[$matches[1]]=$matches[2];}$this->body=preg_replace($pattern,'',$response);} public function __toString(){return $this->body;} public function headers(){return $this->headers;}}} interface OAuthServiceProvider{ public function getAccessTokenUrl(); public function getAuthorizeUrl(); public function getRequestTokenUrl(); public function getAuthTokenFromUrl(); public function getBaseUri(); public function getUserData();}class OAuthApplication implements AWeberOAuthAdapter{ public $debug=false; public $userAgent='AWeber OAuth Consumer Application 1.0 - https://labs.aweber.com/'; public $format=false; public $requiresTokenSecret=true; public $signatureMethod='HMAC-SHA1'; public $version='1.0'; public $curl=false; public $user=false; public $consumerKey=false; public $consumerSecret=false; public function __construct($parentApp=false){if($parentApp){if(!is_a($parentApp,'OAuthServiceProvider')){ throw new Exception('Parent App must be a valid OAuthServiceProvider!');}$this->app=$parentApp;}$this->user=new OAuthUser();$this->curl=new CurlObject();} public function request($method,$uri,$data=array(),$options=array()){$uri=$this->app->removeBaseUri($uri);$url=$this->app->getBaseUri().$uri;if($method=='POST' or $method=='GET'){foreach($data as $key=>$value){if(is_array($value)){$data[$key]=json_encode($value);}}}$response=$this->makeRequest($method,$url,$data);if(!empty($options['return'])){if($options['return']=='status'){return $response->headers['Status-Code'];}if($options['return']=='headers'){return $response->headers;}if($options['return']=='integer'){return intval($response->body);}}$data=json_decode($response->body,true);if(empty($options['allow_empty'])&&!isset($data)){ throw new AWeberResponseError($uri);}return $data;} public function getRequestToken($callbackUrl=false){$data=($callbackUrl)?array('oauth_callback'=>$callbackUrl):array();$resp=$this->makeRequest('POST',$this->app->getRequestTokenUrl(),$data);$data=$this->parseResponse($resp);$this->requiredFromResponse($data,array('oauth_token','oauth_token_secret'));$this->user->requestToken=$data['oauth_token'];$this->user->tokenSecret=$data['oauth_token_secret'];return $data['oauth_token'];} public function getAccessToken(){$resp=$this->makeRequest('POST',$this->app->getAccessTokenUrl(),array('oauth_verifier'=>$this->user->verifier));$data=$this->parseResponse($resp);$this->requiredFromResponse($data,array('oauth_token','oauth_token_secret'));if(empty($data['oauth_token'])){ throw new AWeberOAuthDataMissing('oauth_token');}$this->user->accessToken=$data['oauth_token'];$this->user->tokenSecret=$data['oauth_token_secret'];return array($data['oauth_token'],$data['oauth_token_secret']);} public function parseAsError($response){if(!empty($response['error'])){ throw new AWeberOAuthException($response['error']['type'],$response['error']['message']);}} protected function requiredFromResponse($data,$requiredFields){foreach($requiredFields as $field){if(empty($data[$field])){ throw new AWeberOAuthDataMissing($field);}}} protected function get($url,$data){$url=$this->_addParametersToUrl($url,$data);$handle=$this->curl->init($url);$resp=$this->_sendRequest($handle);return $resp;} protected function _addParametersToUrl($url,$data){if(!empty($data)){if(strpos($url,'?')===false){$url.='?'.$this->buildData($data);}else {$url.='&'.$this->buildData($data);}}return $url;} public function generateNonce($timestamp=false){if(!$timestamp)$timestamp=$this->generateTimestamp();return md5($timestamp.'-'.rand(10000,99999).'-'.uniqid());} public function generateTimestamp(){return time();} public function createSignature($sigBase,$sigKey){switch($this->signatureMethod){case 'HMAC-SHA1':default:return base64_encode(hash_hmac('sha1',$sigBase,$sigKey,true));}} protected function encode($data){return rawurlencode($data);} public function createSignatureKey(){return $this->consumerSecret.'&'.$this->user->tokenSecret;} public function getOAuthRequestData(){$token=$this->user->getHighestPriorityToken();$ts=$this->generateTimestamp();$nonce=$this->generateNonce($ts);return array('oauth_token'=>$token,'oauth_consumer_key'=>$this->consumerKey,'oauth_version'=>$this->version,'oauth_timestamp'=>$ts,'oauth_signature_method'=>$this->signatureMethod,'oauth_nonce'=>$nonce);} public function mergeOAuthData($requestData){$oauthData=$this->getOAuthRequestData();return array_merge($requestData,$oauthData);} public function createSignatureBase($method,$url,$data){$method=$this->encode(strtoupper($method));$query=parse_url($url,PHP_URL_QUERY);if($query){$parts=explode('?',$url,2);$url=array_shift($parts);$items=explode('&',$query);foreach($items as $item){list($key,$value)=explode('=',$item);$data[rawurldecode($key)]=rawurldecode($value);}}$url=$this->encode($url);$data=$this->encode($this->collapseDataForSignature($data));return $method.'&'.$url.'&'.$data;} public function collapseDataForSignature($data){ksort($data);$collapse='';foreach($data as $key=>$val){if(!empty($collapse))$collapse.='&';$collapse.=$key.'='.$this->encode($val);}return $collapse;} public function signRequest($method,$url,$data){$base=$this->createSignatureBase($method,$url,$data);$key=$this->createSignatureKey();$data['oauth_signature']=$this->createSignature($base,$key);ksort($data);return $data;} public function makeRequest($method,$url,$data=array()){if($this->debug)echo "\n** {$method}: $url\n";switch(strtoupper($method)){case 'POST':$oauth=$this->prepareRequest($method,$url,$data);$resp=$this->post($url,$oauth);break;case 'GET':$oauth=$this->prepareRequest($method,$url,$data);$resp=$this->get($url,$oauth,$data);break;case 'DELETE':$oauth=$this->prepareRequest($method,$url,$data);$resp=$this->delete($url,$oauth);break;case 'PATCH':$oauth=$this->prepareRequest($method,$url,array());$resp=$this->patch($url,$oauth,$data);break;}if($this->debug){echo "<pre>";print_r($oauth);echo " --> Status: {$resp->headers['Status-Code']}\n";echo " --> Body: {$resp->body}";echo "</pre>";}if(!$resp){$msg='Unable to connect to the AWeber API.  ('.$this->error.')';$error=array('message'=>$msg,'type'=>'APIUnreachableError','documentation_url'=>'https://labs.aweber.com/docs/troubleshooting'); throw new AWeberAPIException($error,$url);}if($resp->headers['Status-Code']>=400){$data=json_decode($resp->body,true); throw new AWeberAPIException($data['error'],$url);}return $resp;} protected function patch($url,$oauth,$data){$url=$this->_addParametersToUrl($url,$oauth);$handle=$this->curl->init($url);$this->curl->setopt($handle,CURLOPT_CUSTOMREQUEST,'PATCH');$this->curl->setopt($handle,CURLOPT_POSTFIELDS,json_encode($data));$resp=$this->_sendRequest($handle,array('Expect:','Content-Type: application/json'));return $resp;} protected function post($url,$oauth){$handle=$this->curl->init($url);$postData=$this->buildData($oauth);$this->curl->setopt($handle,CURLOPT_POST,true);$this->curl->setopt($handle,CURLOPT_POSTFIELDS,$postData);$resp=$this->_sendRequest($handle);return $resp;} protected function delete($url,$data){$url=$this->_addParametersToUrl($url,$data);$handle=$this->curl->init($url);$this->curl->setopt($handle,CURLOPT_CUSTOMREQUEST,'DELETE');$resp=$this->_sendRequest($handle);return $resp;} public function buildData($data){ksort($data);$params=array();foreach($data as $key=>$value){$params[]=$key.'='.$this->encode($value);}return implode('&',$params);} private function _sendRequest($handle,$headers=array('Expect:')){$this->curl->setopt($handle,CURLOPT_RETURNTRANSFER,true);$this->curl->setopt($handle,CURLOPT_HEADER,true);$this->curl->setopt($handle,CURLOPT_HTTPHEADER,$headers);$this->curl->setopt($handle,CURLOPT_USERAGENT,$this->userAgent);$this->curl->setopt($handle,CURLOPT_SSL_VERIFYPEER,FALSE);$this->curl->setopt($handle,CURLOPT_VERBOSE,FALSE);$this->curl->setopt($handle,CURLOPT_CONNECTTIMEOUT,10);$this->curl->setopt($handle,CURLOPT_TIMEOUT,90);$resp=$this->curl->execute($handle);if($resp){return new CurlResponse($resp);}$this->error=$this->curl->errno($handle).' - '.$this->curl->error($handle);return false;} public function prepareRequest($method,$url,$data){$data=$this->mergeOAuthData($data);$data=$this->signRequest($method,$url,$data);return $data;} public function parseResponse($resp){$data=array();if(!$resp){return $data;}if(empty($resp)){return $data;}if(empty($resp->body)){return $data;}switch($this->format){case 'json':$data=json_decode($resp->body);break;default:parse_str($resp->body,$data);}$this->parseAsError($data);return $data;}}class OAuthUser{ public $authorizedToken=false; public $requestToken=false; public $verifier=false; public $tokenSecret=false; public $accessToken=false; public function isAuthorized(){if(empty($this->authorizedToken)&&empty($this->accessToken)){return false;}return true;} public function getHighestPriorityToken(){if(!empty($this->accessToken))return $this->accessToken;if(!empty($this->authorizedToken))return $this->authorizedToken;if(!empty($this->requestToken))return $this->requestToken;return '';}}class AWeberResponse extends AWeberAPIBase{ public $adapter=false; public $data=array(); public $_dynamicData=array(); public function __construct($response,$url,$adapter){$this->adapter=$adapter;$this->url=$url;$this->data=$response;} public function __set($key,$value){$this->{$key}=$value;} public function __get($value){if(in_array($value,$this->_privateData)){return null;}if(array_key_exists($value,$this->data)){return $this->data[$value];}if($value=='type')return $this->_type();}}class AWeberCollection extends AWeberResponse implements ArrayAccess,Iterator,Countable{ protected $pageSize=100; protected $pageStart=0; protected function _updatePageSize(){$url=$this->url;if(array_key_exists('next_collection_link',$this->data)){$url=$this->data['next_collection_link'];}elseif(array_key_exists('prev_collection_link',$this->data)){$url=$this->data['prev_collection_link'];}$url_parts=parse_url($url);if(array_key_exists('query',$url_parts)){parse_str($url_parts['query'],$params);if(array_key_exists('ws_size',$params)){$this->pageSize=$params['ws_size'];return;}}$this->pageSize=count($this->data['entries']);} public function __construct($response,$url,$adapter){parent::__construct($response,$url,$adapter);$this->_updatePageSize();} protected $_privateData=array('entries','start','next_collection_link',); public function getById($id){$data=$this->adapter->request('GET',"{$this->url}/{$id}");$url="{$this->url}/{$id}";return new AWeberEntry($data,$url,$this->adapter);} public function getParentEntry(){$url_parts=explode('/',$this->url);$size=count($url_parts);$url=substr($this->url,0,-strlen($url_parts[$size-1])-1);try{$data=$this->adapter->request('GET',$url);return new AWeberEntry($data,$url,$this->adapter);}catch(Exception$e){return NULL;}} protected function _type(){$urlParts=explode('/',$this->url);$type=array_pop($urlParts);return $type;} public function create($kv_pairs){$params=array_merge(array('ws.op'=>'create'),$kv_pairs);$data=$this->adapter->request('POST',$this->url,$params,array('return'=>'headers'));$url=$data['Location'];$resource_data=$this->adapter->request('GET',$url);return new AWeberEntry($resource_data,$url,$this->adapter);} public function find($search_data){$params=array_merge($search_data,array('ws.op'=>'find'));$data=$this->adapter->request('GET',$this->url,$params);$ts_params=array_merge($params,array('ws.show'=>'total_size'));$total_size=$this->adapter->request('GET',$this->url,$ts_params,array('return'=>'integer'));$data['total_size']=$total_size;return $this->readResponse($data,$this->url);} public function offsetSet($offset,$value){} public function offsetUnset($offset){} public function offsetExists($offset){if($offset>=0&&$offset<$this->total_size){return true;}return false;} protected function _fetchCollectionData($offset){if(!array_key_exists('next_collection_link',$this->data)){return null;}$parsed=parse_url($this->data['next_collection_link']);$pairs=explode('&',$parsed['query']);foreach($pairs as $pair){list($key,$val)=explode('=',$pair);$params[$key]=$val;}$limit=$params['ws.size'];$pagination_offset=intval($offset/$limit)*$limit;$params['ws.start']=$pagination_offset;$url_parts=explode('?',$this->url);$data=$this->adapter->request('GET',$url_parts[0],$params);$this->pageStart=$params['ws.start'];$this->pageSize=$params['ws.size'];$collection_data=array('entries','next_collection_link','prev_collection_link','ws.start');foreach($collection_data as $item){if(!array_key_exists($item,$this->data)){continue;}if(!array_key_exists($item,$data)){continue;}$this->data[$item]=$data[$item];}} public function offsetGet($offset){if(!$this->offsetExists($offset)){return null;}$limit=$this->pageSize;$pagination_offset=intval($offset/$limit)*$limit;if($pagination_offset!==$this->pageStart){$this->_fetchCollectionData($offset);}$entry=$this->data['entries'][$offset-$pagination_offset];$entry_url=$this->adapter->app->removeBaseUri($entry['self_link']);return new AWeberEntry($entry,$entry_url,$this->adapter);} protected $_iterationKey=0; public function current(){return $this->offsetGet($this->_iterationKey);} public function key(){return $this->_iterationKey;} public function next(){$this->_iterationKey++;} public function rewind(){$this->_iterationKey=0;} public function valid(){return $this->offsetExists($this->key());} public function count(){return $this->total_size;}}class AWeberEntry extends AWeberResponse{ protected $_privateData=array('resource_type_link','http_etag',); protected $_localDiff=array(); protected $_collections=array(); public function attrs(){$attrs=array();foreach($this->data as $key=>$value){if(!in_array($key,$this->_privateData)&&!strpos($key,'collection_link')){$attrs[$key]=$value;}}if(!empty(AWeberAPI::$_collectionMap[$this->type])){foreach(AWeberAPI::$_collectionMap[$this->type] as $child){$attrs[$child]='collection';}}return $attrs;} protected function _type(){if(empty($this->type)){$typeLink=$this->data['resource_type_link'];if(empty($typeLink))return null;list($url,$type)=explode('#',$typeLink);$this->type=$type;}return $this->type;} public function delete(){$this->adapter->request('DELETE',$this->url,array(),array('return'=>'status'));return true;} public function move($list,$last_followup_message_number_sent=NULL){$params=array('ws.op'=>'move','list_link'=>$list->self_link);if(isset($last_followup_message_number_sent)){$params['last_followup_message_number_sent']=$last_followup_message_number_sent;}$data=$this->adapter->request('POST',$this->url,$params,array('return'=>'headers'));$url=$data['Location'];$resource_data=$this->adapter->request('GET',$url);return new AWeberEntry($resource_data,$url,$this->adapter);} public function save(){if(!empty($this->_localDiff)){$data=$this->adapter->request('PATCH',$this->url,$this->_localDiff,array('return'=>'status'));}$this->_localDiff=array();return true;} public function __get($value){if(in_array($value,$this->_privateData)){return null;}if(!empty($this->data)&&array_key_exists($value,$this->data)){if(is_array($this->data[$value])){$array=new AWeberEntryDataArray($this->data[$value],$value,$this);$this->data[$value]=$array;}return $this->data[$value];}if($value=='type')return $this->_type();if($this->_isChildCollection($value)){return $this->_getCollection($value);} throw new AWeberResourceNotImplemented($this,$value);} public function __set($key,$value){if(array_key_exists($key,$this->data)){$this->_localDiff[$key]=$value;return $this->data[$key]=$value;}else {return parent::__set($key,$value);}} public function findSubscribers($search_data){$this->_methodFor(array('account'));$params=array_merge($search_data,array('ws.op'=>'findSubscribers'));$data=$this->adapter->request('GET',$this->url,$params);$ts_params=array_merge($params,array('ws.show'=>'total_size'));$total_size=$this->adapter->request('GET',$this->url,$ts_params,array('return'=>'integer'));$data['total_size']=$total_size;$url=$this->url.'?'.http_build_query($params);return new AWeberCollection($data,$url,$this->adapter);} public function getActivity(){$this->_methodFor(array('subscriber'));$params=array('ws.op'=>'getActivity');$data=$this->adapter->request('GET',$this->url,$params);$ts_params=array_merge($params,array('ws.show'=>'total_size'));$total_size=$this->adapter->request('GET',$this->url,$ts_params,array('return'=>'integer'));$data['total_size']=$total_size;$url=$this->url.'?'.http_build_query($params);return new AWeberCollection($data,$url,$this->adapter);} public function getParentEntry(){$url_parts=explode('/',$this->url);$size=count($url_parts);$url=substr($this->url,0,-strlen($url_parts[$size-1])-1);$url=substr($url,0,-strlen($url_parts[$size-2])-1);try{$data=$this->adapter->request('GET',$url);return new AWeberEntry($data,$url,$this->adapter);}catch(Exception$e){return NULL;}} public function getWebForms(){$this->_methodFor(array('account'));$data=$this->adapter->request('GET',$this->url.'?ws.op=getWebForms',array(),array('allow_empty'=>true));return $this->_parseNamedOperation($data);} public function getWebFormSplitTests(){$this->_methodFor(array('account'));$data=$this->adapter->request('GET',$this->url.'?ws.op=getWebFormSplitTests',array(),array('allow_empty'=>true));return $this->_parseNamedOperation($data);} protected function _parseNamedOperation($data){$results=array();foreach($data as $entryData){$results[]=new AWeberEntry($entryData,str_replace($this->adapter->app->getBaseUri(),'',$entryData['self_link']),$this->adapter);}return $results;} protected function _methodFor($entryTypes){if(in_array($this->type,$entryTypes))return true; throw new AWeberMethodNotImplemented($this);} protected function _getCollection($value){if(empty($this->_collections[$value])){$url="{$this->url}/{$value}";$data=$this->adapter->request('GET',$url);$this->_collections[$value]=new AWeberCollection($data,$url,$this->adapter);}return $this->_collections[$value];} protected function _isChildCollection($value){$this->_type();if(!empty(AWeberAPI::$_collectionMap[$this->type])&&in_array($value,AWeberAPI::$_collectionMap[$this->type]))return true;return false;}}class AWeberServiceProvider implements OAuthServiceProvider{ public $baseUri='https://api.aweber.com/1.0'; public $accessTokenUrl='https://auth.aweber.com/1.0/oauth/access_token'; public $authorizeUrl='https://auth.aweber.com/1.0/oauth/authorize'; public $requestTokenUrl='https://auth.aweber.com/1.0/oauth/request_token'; public function getBaseUri(){return $this->baseUri;} public function removeBaseUri($url){return str_replace($this->getBaseUri(),'',$url);} public function getAccessTokenUrl(){return $this->accessTokenUrl;} public function getAuthorizeUrl(){return $this->authorizeUrl;} public function getRequestTokenUrl(){return $this->requestTokenUrl;} public function getAuthTokenFromUrl(){return '';} public function getUserData(){return '';}}class AWeberAPIBase{static protected $_collectionMap=array('account'=>array('lists','integrations'),'broadcast_campaign'=>array('links','messages','stats'),'followup_campaign'=>array('links','messages','stats'),'link'=>array('clicks'),'list'=>array('campaigns','custom_fields','subscribers','web_forms','web_form_split_tests'),'web_form'=>array(),'web_form_split_test'=>array('components'),); public function loadFromUrl($url){$data=$this->adapter->request('GET',$url);return $this->readResponse($data,$url);} protected function _cleanUrl($url){return str_replace($this->adapter->app->getBaseUri(),'',$url);} protected function readResponse($response,$url){$this->adapter->parseAsError($response);if(!empty($response['id'])){return new AWeberEntry($response,$url,$this->adapter);}else if(array_key_exists('entries',$response)){return new AWeberCollection($response,$url,$this->adapter);}return false;}}class AWeberAPI extends AWeberAPIBase{ public $consumerKey=false; public $consumerSecret=false; public $adapter=false; public static function getDataFromAweberID($string){list($consumerKey,$consumerSecret,$requestToken,$tokenSecret,$verifier)=AWeberAPI::_parseAweberID($string);if(!$verifier){return null;}$aweber=new AweberAPI($consumerKey,$consumerSecret);$aweber->adapter->user->requestToken=$requestToken;$aweber->adapter->user->tokenSecret=$tokenSecret;$aweber->adapter->user->verifier=$verifier;list($accessToken,$accessSecret)=$aweber->getAccessToken();return array($consumerKey,$consumerSecret,$accessToken,$accessSecret);} protected static function _parseAWeberID($string){$values=explode('|',$string);if(count($values)<5){return null;}return array_slice($values,0,5);} public function __construct($key,$secret){$this->consumerKey=$key;$this->consumerSecret=$secret;$this->setAdapter();} public function getAuthorizeUrl(){$requestToken=$this->user->requestToken;return (empty($requestToken))?$this->adapter->app->getAuthorizeUrl():$this->adapter->app->getAuthorizeUrl()."?oauth_token={$this->user->requestToken}";} public function setAdapter($adapter=null){if(empty($adapter)){$serviceProvider=new AWeberServiceProvider();$adapter=new OAuthApplication($serviceProvider);$adapter->consumerKey=$this->consumerKey;$adapter->consumerSecret=$this->consumerSecret;}$this->adapter=$adapter;} public function getAccount($token=false,$secret=false){if($token&&$secret){$user=new OAuthUser();$user->accessToken=$token;$user->tokenSecret=$secret;$this->adapter->user=$user;}$body=$this->adapter->request('GET','/accounts');$accounts=$this->readResponse($body,'/accounts');return $accounts[0];} public function __get($item){if($item=='user')return $this->adapter->user;trigger_error("Could not find \"{$item}\"");} public function getRequestToken($callbackUrl){$requestToken=$this->adapter->getRequestToken($callbackUrl);return array($requestToken,$this->user->tokenSecret);} public function getAccessToken(){return $this->adapter->getAccessToken();}}